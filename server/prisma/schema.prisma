// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
}

model Company {
  id          String       @id @default(cuid())
  name        String
  email       String       @unique
  phoneNumber String
  dateCreated DateTime     @default(now())
  users       Users[]
  fleet       Fleet[]
  equipment   Equipment[]
  role        Role[]
  Truck       Truck[]
  photoAreas  PhotoAreas[]
}

model Users {
  id        String  @id @default(cuid())
  name      String
  email     String  @unique
  Company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String  @default("End User")
  Role      Role?   @relation(fields: [roleName], references: [name])
  roleName  String?
}

model Role {
  name      String   @id
  users     Users[]
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

model Fleet {
  id        String   @id @default(cuid())
  name      String
  trucks    Truck[]
  Company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId String?
}

model Truck {
  id          String        @id @default(cuid())
  name        String
  vin         String?
  license     String?
  year        Int?
  urlPath     String        @default(cuid())
  Fleet       Fleet?        @relation(fields: [fleetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fleetId     String?       @default("null")
  maintenance Maintenance[]
  inventory   Inventory[]
  Company     Company       @relation(fields: [companyId], references: [id])
  companyId   String

  // Add a composite unique constraint
  @@unique([companyId, name])
}

model Maintenance {
  id                  String   @id @default(cuid())
  date                DateTime @default(now())
  mileage             Int?
  oil                 String?
  coolant             String?
  frontDriverTread    String?
  frontPassengerTread String?
  rearDriverTread     String?
  rearPassengerTread  String?
  notes               String?
  Truck               Truck?   @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  truckId             String?
}

model Inventory {
  id              String                 @id @default(cuid())
  date            DateTime               @default(now())
  Truck           Truck?                 @relation(fields: [truckId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  truckId         String?
  equipmentItems  EquipmentInInventory[]
  inventoryPhotos InventoryPhoto[]
}

model InventoryPhoto {
  inventory    Inventory  @relation(fields: [inventoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inventoryId  String
  photoArea    PhotoAreas @relation(fields: [photoAreasId], references: [id])
  photoAreasId String     @unique
  photo        Photos     @relation(fields: [photoId], references: [id])
  photoId      String     @unique

  @@id([inventoryId, photoAreasId, photoId])
}

model EquipmentInInventory {
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  equipmentId String
  quantity    Int

  @@id([inventoryId, equipmentId])
}

model Equipment {
  id          String                 @id @default(cuid())
  name        String
  Company     Company?               @relation(fields: [companyId], references: [id])
  companyId   String?
  inventories EquipmentInInventory[]

  @@unique([name, companyId])
}

model PhotoAreas {
  id             String          @id @default(cuid())
  name           String
  company        Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  companyId      String
  position       Int             @default(0)
  Photos         Photos[]
  inventoryPhoto InventoryPhoto?
}

model Photos {
  id                  String          @id @default(cuid())
  date                DateTime        @default(now())
  photoArea           PhotoAreas?     @relation(fields: [photoAreasId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoAreasId        String?
  inventoryPhoto      InventoryPhoto?
  cloudinaryURL       String
  cloudinaryAssetID   String
  cloudinarySecureURL String
}
